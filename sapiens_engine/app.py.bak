elif selected_tab == "Audio Generation":
    st.title("Philosophical Dialogue Audio Generation")
    st.write("Convert your philosophical dialogues to speech with unique voices for each speaker.")
    
    # Check if we have dialogues to convert
    if not st.session_state.dialogue_history:
        st.warning("Run a simulation first to generate dialogues for audio conversion.")
    else:
        # Audio generation options
        st.subheader("Audio Generation Options")
        
        # Select which dialogue to convert
        dialogue_options = []
        for i, dialogue in enumerate(st.session_state.dialogue_history):
            topic = dialogue.get("topic", f"Dialogue {i+1}")
            dialogue_options.append(f"Dialogue {i+1}: {topic}")
        
        selected_dialogue_index = st.selectbox(
            "Select dialogue to convert",
            range(len(dialogue_options)),
            format_func=lambda i: dialogue_options[i]
        )
        
        selected_dialogue = st.session_state.dialogue_history[selected_dialogue_index]
        
        # ... rest of the audio generation code ...

# Helper function to get source materials based on topic and selected sources
def _get_source_materials(source_loader, topic, selected_sources):
    if selected_sources:
        # Use specifically selected sources
        source_materials = []
        all_sources = source_loader.get_all_sources()
        
        # ... rest of the function ... 