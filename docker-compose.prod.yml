services:
  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: sapiens-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./certbot/conf:/etc/letsencrypt:ro
      - ./certbot/www:/var/www/certbot:ro
    depends_on:
      - api
    networks:
      - sapiens-network

  # Certbot for SSL certificates
  certbot:
    image: certbot/certbot
    container_name: sapiens-certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    command: certonly --webroot -w /var/www/certbot --force-renewal --email your-email@domain.com -d your-domain.com --agree-tos
    networks:
      - sapiens-network

  # Redis for state management (Production optimized)
  redis:
    image: redis:7-alpine
    container_name: sapiens-redis
    restart: unless-stopped
    ports:
      - "127.0.0.1:6379:6379"  # Only bind to localhost for security
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - sapiens-network
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G

  # Sapiens Engine API (Production)
  api:
    build: 
      context: .
      dockerfile: Dockerfile.prod
    image: sapiens-engine:latest
    container_name: sapiens-api
    restart: unless-stopped
    expose:
      - "8000"
    environment:
      - ENVIRONMENT=production
      - REDIS_URL=redis://redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - NEXTJS_SERVER_URL=${NEXTJS_SERVER_URL}
      - MAX_ACTIVE_ROOMS=100
      - MAX_MEMORY_USAGE_GB=12
      - MEMORY_CHECK_INTERVAL=5
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
      - WORKERS=4
      - LOG_LEVEL=info
    volumes:
      - ./portraits:/app/portraits:ro
      - api_logs:/app/logs
      - ./config:/app/config:ro
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - sapiens-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 8G
          cpus: '2.0'
        reservations:
          memory: 4G
          cpus: '1.0'

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: sapiens-prometheus
    restart: unless-stopped
    ports:
      - "127.0.0.1:9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - sapiens-network
    profiles:
      - monitoring

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: sapiens-grafana
    restart: unless-stopped
    ports:
      - "127.0.0.1:3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - sapiens-network
    profiles:
      - monitoring

volumes:
  redis_data:
    driver: local
  api_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  sapiens-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 