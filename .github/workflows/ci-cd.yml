name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, backend-deploy-clean ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio

    - name: Run tests
      run: |
        # Add your test commands here
        # pytest tests/ -v
        echo "Tests would run here"

    - name: Lint code
      run: |
        pip install flake8 black
        # flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # black --check .
        echo "Linting would run here"

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/backend-deploy-clean'
    
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=backend-latest,enable=${{ github.ref == 'refs/heads/backend-deploy-clean' }}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.prod
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/backend-deploy-clean'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        port: ${{ secrets.PRODUCTION_PORT || 22 }}
        script: |
          # Navigate to application directory
          cd /opt/sapiens-engine
          
          # Pull latest code from backend branch
          git fetch origin
          git checkout backend-deploy-clean
          git pull origin backend-deploy-clean
          
          # Copy environment file
          cp .env.production .env
          
          # Login to GitHub Container Registry
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # Pull latest image
          docker-compose -f docker-compose.prod.yml pull
          
          # Deploy with zero-downtime
          docker-compose -f docker-compose.prod.yml up -d --remove-orphans
          
          # Clean up old images
          docker image prune -f
          
          # Health check
          sleep 30
          curl -f https://${{ secrets.DOMAIN }}/health || exit 1

  notify:
    needs: [test, build, deploy]
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: Notify Slack on success
      if: ${{ needs.deploy.result == 'success' }}
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: "üöÄ Backend deployment successful! New version is live at https://${{ secrets.DOMAIN }}"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Notify Slack on failure
      if: ${{ needs.deploy.result == 'failure' || needs.build.result == 'failure' || needs.test.result == 'failure' }}
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: "‚ùå Backend deployment failed! Check GitHub Actions for details."
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} 