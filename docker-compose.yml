services:
  # Redis for state management and caching
  redis:
    image: redis:7-alpine
    container_name: sapiens-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 2gb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - sapiens-network

  # Sapiens Engine API
  api:
    build: .
    container_name: sapiens-api
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - REDIS_URL=redis://redis:6379
      - NEXTJS_SERVER_URL=http://localhost:3000
      - MAX_ACTIVE_ROOMS=50
      - MAX_MEMORY_USAGE_GB=8
      - MEMORY_CHECK_INTERVAL=10
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
    volumes:
      - ./portraits:/app/portraits:ro
      - api_logs:/app/logs
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - sapiens-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis Insight (optional - for Redis monitoring)
  redis-insight:
    image: redislabs/redisinsight:latest
    container_name: sapiens-redis-insight
    restart: unless-stopped
    ports:
      - "8001:8001"
    environment:
      - REDIS_URL=redis://redis:6379
    depends_on:
      - redis
    networks:
      - sapiens-network
    profiles:
      - monitoring

volumes:
  redis_data:
    driver: local
  api_logs:
    driver: local

networks:
  sapiens-network:
    driver: bridge 